from Crypto.Util.number import bytes_to_long, long_to_bytes
import gmpy2
import math

def egcd(a, b): # can be used to test if numbers are co-primes
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


a = [997187825992201205860585755150156234305478124167254211462875317695365282732008530839462802066909461811266042371075176445836343145843680726244881143186749232066498950069430557761310214887708195403076785830006370506842531447508228376672889409469485886959862963877007439676315381208438727785730358338508962371 ,112649635579818441619775589747671808642160263327631747264752865213452257765965875383070525768581545564898887401252434807905270529560158535123525166263748391490964177334450843189486424024604734338893625055985625080580984138478645214185686688707790404031504776466060627851054051573449065615309349063045194392047 , 115723844411970199634719075157119293489993142869981452649194742268755213357944607223851246550009774323600304966055216309298747493656311240368554732972792114644972488255960161892621447570179706144345881852779539204572368332670470020216126986124072150822999384019430696631279658835430965880598473842235548510593, 41535327577719674035464862180119535229791587295355821886553649510039785511007784043375086914994217241166151230237634526049726316723397840394873069716896670202387638845422047669309998151903805033819417419546645405765206742871072341122645475421022369396077189405792918249579626455019831828532932064486946724243, 58850608400284186513222576765792396393033012002886508331065008152761535388693103517239802102973763901412990618302737860025977964792323368342638556772351562928210801024465147186795726519136274465102287705475071224886147386092127580597114503317593294215032213959668952753363691341111497614394162258241696756691,1238587134612973971415101177080960714472601784749312307406953509784301958834202647171665277258592125229015785587674223949214708436626834691566242153265407609392664322242007586127531520812342031092512897168268309339158353210476110261799288519745738740262826014304993440559735239716185290480264989491098653777,128321281993427395986453128769289208340914178226666500367964921431217432667755993543836480064656058415440019802224900902546765832036788471333900036470706670224236892083028138620727264269768574164254655457024451804742149426251023949694076389127664271968789082128617901468519431287564573094310756419395567975727,57420545190475273940935905556679746998478729593749506899984536058516132667220244367995971709418311514558096977339997158671437222481813521274351737873163506161181250810425775687814845039101253374076397036130724899915631078621051439245252664558338107122630324834683659292906228789587403154250063863775411814881,137686155069197769980756184355881356849304861133117779331823304788045604618135868667281792093027402886364792729522951555428579110902901952388074943789823234380153030209141971125587958220459497980506603261298156183908426584003096495245325435033663504782118187342037254169933933993162920103375308200136953158401,]




#for i in a:
#    for j in a:
#        if i != j:
#            print(math.gcd(i,j))



guess = 12117717634661447128647943483912040772241097914126380240028878917605920543320951000813217299678214801720664141663955381289172887935222185768875580129869999
print(guess)

target_n = 2318553827267041599931064141028026591078453523755133761420994537426231546233197332557815088229590256567177621743082082713100922775483908922217521567861530205737139513575691852244362271068595653732088709994411183164926098663772268120044065766077197167667585331637038825079142327613226776540743407081106744519

c = 2255296633936604604490193777189642999170921517383872458719910324954614900683697288325565056935796303372973284169167013060432104141786712034296127844869460366430567132977266285093487512605926172985342614713659881511775812329365735530831957367531121557358020217773884517112603921006673150910870383826703797655

p = guess
#while target_n % p != 0:
#    p += 1


while target_n % guess != 0:
    guess -= 1
print(guess)

p = guess
q = target_n // p

e = 65537
phi = (p-1) * (q-1)

d = gmpy2.invert(e, phi)

print(long_to_bytes(pow(c,d, target_n)))



